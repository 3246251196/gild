#! /usr/bin/python
#
# The main gild script that wraps the commands.
#
# (c) 2015,2016 by Sebastian Bauer
#

from __future__ import print_function

import glob
import os.path
import sys
import argparse
from subprocess import call

from gildutils import autocomplete

DEBUG = False

script = os.path.realpath(sys.argv[0])
scriptdir = os.path.realpath(os.path.dirname(script))
progname = os.path.basename(sys.argv[0])

# Some commands shall be ignored for help as they are
# not mature enough or just my own experiments
ignored_commands = set([
	"echo"
	])

commands = glob.glob(os.path.join(scriptdir,"gild-*"))
commands = [os.path.basename(command) for command in commands]
commands = sorted([command[5:] for command in commands])

# Until commands are proper libs or we devise anothe mechansim,
# we know the short helps here
def get_short_help(command):
	short_help = {
		"clone": "Clone all repositories managed by gild",
		"checkout": "Checkout a specific version of a specific component",
		"genpatch": "Generate patches for a component against a baseline",
		"get": "Get baseline archive",
		"list": "List gild-managed components and versions",
		"svnconv": "Convert an svn vendor branch repository to a gild-based one"
	}
	try:
		return short_help[command]
	except KeyError:
		return ""

commands = [command for command in commands if command not in ignored_commands]

if "_ARGCOMPLETE" in os.environ:
	comp_line = os.environ["COMP_LINE"]
	comp_point = int(os.environ["COMP_POINT"])
	if comp_line.startswith(sys.argv[0]):
		new_comp_line = comp_line[len(sys.argv[0]):].lstrip()

		for c in commands:
			if new_comp_line.startswith(c):
				new_cmd = os.path.join(scriptdir,"gild-" + c);
				new_comp_line = new_cmd + new_comp_line[len(c):]

				# Adjust COMP_LINE and COMP_POINT for the sub command
				new_environ = os.environ.copy()
				new_environ["COMP_LINE"] = new_comp_line
				new_environ["COMP_POINT"] = str(comp_point - len(comp_line) + len(new_comp_line))

				if DEBUG:
					fd = open("/tmp/tttt.txt","w")
					fd.write("AAA " + new_comp_line + " AAA\n")

					for k in os.environ:
						fd.write(k + " " + os.environ[k] + "\n")
					fd.close()

				call([new_cmd] + sys.argv[2:], env=new_environ)
				sys.exit(0)

width = max([len(command) for command in commands]) + 2
epilog = "Available commands:\n{0}".format("\n".join(["   " + command.ljust(width) + " " + get_short_help(command) for command in commands]))

parser = argparse.ArgumentParser(description="Manage patches using git", epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('commmand', help="The command to be invoked.").completer = lambda **kwargs: commands
parser.add_argument('args', nargs='*', help="Further command-specific arguments.")
autocomplete(parser)

# Manually filter -h that was meant for a command
argv = sys.argv
command_help = []
if len(argv) > 2:
	if argv[2] == '-h' or argv[2] == '--help':
		command_help = ['-h']
		del argv[2]

args = parser.parse_known_args(argv)

command = argv[1]

if command not in commands:
	sys.exit(progname + ": '" + command + "' is not a gild command.")

real_command = os.path.join(scriptdir,"gild-" + command)

call([real_command] + command_help + argv[2:])
