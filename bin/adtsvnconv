#! /usr/bin/python
#
# This script converts a svn vendor branch to pacthes as
# organized in this project
#
# (c) 2015 by Sebastian Bauer
#

from __future__ import print_function

import os.path
import os
import sys
import argparse
import tempfile
import shutil
from subprocess import call
from subprocess import check_output
from xml.dom.minidom import parseString

script = os.path.realpath(sys.argv[0])
root = os.path.realpath(os.path.dirname(script) + "/../")

parser = argparse.ArgumentParser(description='Convert svn vendor branches to patches')

parser.add_argument('vendor_url', metavar='vendor-url', help="""
    The URL to the vendor branch. The content serves as the base of the patches.
    """)
parser.add_argument('changes_url', metavar='changes-url', help="""
    The URL to the branch that contains changes to the vendor branch. For each
    considered commit, an new patch against the base is generated.
    """)
parser.add_argument('--start-rev', type=int, help="""
    Define the first revision of the changes branch for which a patch should be
    generated.
    """)
parser.add_argument('--patch-dir', help="""
    Defines the name of the directory that should contain the patches within the
    patch repository. Default is to use the root of the patch repo.
    """)
args = parser.parse_args()

changed_url = args.changes_url #"file:///home/sba/amiga/adtools.svn/code/trunk/coreutils"
vendor_url = args.vendor_url #"file:///home/sba/amiga/adtools.svn/code/vendor/coreutils/5.2.1"
start_rev = args.start_rev # 342

if args.patch_dir: patch_dir = args.patch_dir
else: patch_dir = "."

svn_log = check_output(["svn", "log", "--xml", changed_url])
svn_log_dom = parseString(svn_log)

work_dir = tempfile.mkdtemp(prefix='tmpadtwork')
patch_repo_dir = tempfile.mkdtemp(prefix='tmpadtpatch')
patch_dir = os.path.join(patch_repo_dir, patch_dir);

os.makedirs(patch_dir)

print("Work directory is: " + work_dir, file=sys.stderr)
os.chdir(work_dir)

call(["git","init"])
call(["git","init",patch_repo_dir])

# export base
call(["svn", "export", vendor_url, "--force","."])

# add everything to git
call(["git","add","."])
call(["git", "commit","-m", "Initial commit."])

def clean_workdir():
    # Clean everything expect for .git (could also move .git somewhere else)
    for p in os.listdir("."):
        if ".git" == p: continue
        fp = os.path.join(".", p);
        if os.path.isfile(fp): os.unlink(fp)
        elif os.path.isdir(fp): shutil.rmtree(fp)

# Our list of svn logs comprising dicts with 'rev' and 'msg' keys
svn_logs = []

# "Plain" xml svn log entries
svn_log_entries = svn_log_dom.getElementsByTagName("logentry")
for e in svn_log_entries:
    rev = int(e.getAttribute("revision"))
    if int(rev) < start_rev:continue
    msg = e.getElementsByTagName("msg")[0].firstChild.nodeValue
    pair = {'rev': rev, 'msg': msg}
    svn_logs.append(pair)

# Sort according to the rev in ascending order
svn_logs = sorted(svn_logs, key = lambda k: k['rev'])

for log in svn_logs:
	rev = log['rev']
	msg = log['msg']

	os.chdir(work_dir)

	call(["git","checkout","master"])
	call(["git","checkout","-b","changes"+str(rev)])
	clean_workdir()
	call(["git","rm", "-r", "."])
	call(["svn", "export", changed_url, "-r"+str(rev),"--force","."])
	call(["git","add","."])
	call(["git","commit","-m","Changes for AmigaOS imported from adtools svn"])

	call(["git","format-patch","-U6","--find-copies-harder","--full-index","master","-o",patch_dir])

	os.chdir(patch_repo_dir)
	call(["git","add","."])
	call(["git","commit","-m",msg])

	print(log['msg'])

# Just in case we would add stuff below here
os.chdir(work_dir)

print("Work directory is: " + work_dir, file=sys.stderr)
print("Patch repo at: " + patch_repo_dir, file=sys.stderr)
