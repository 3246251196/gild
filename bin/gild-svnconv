#! /usr/bin/python
#
# This script converts a svn vendor branch to pacthes as
# organized in this project
#
# (c) 2015,2016 by Sebastian Bauer
#

from __future__ import print_function

import os.path
import os
import sys
import argparse
import tempfile
import shutil
import datetime

from subprocess import call
from subprocess import check_output
from xml.dom.minidom import parseString

script = os.path.realpath(sys.argv[0])
root = os.path.realpath(os.path.dirname(script) + "/../")
authors_file = None

parser = argparse.ArgumentParser(description='Convert svn vendor branches to patches')

parser.add_argument('vendor_url', metavar='vendor-url', help="""
    The URL to the vendor branch. The content serves as the base of the patches.
    """)
parser.add_argument('changes_url', metavar='changes-url', help="""
    The URL to the branch that contains changes to the vendor branch. For each
    considered commit, an new patch against the base is generated.
    """)
parser.add_argument('-m', help="""
    Commit message to use.
	""")
parser.add_argument('--start-rev', type=int, help="""
    Define the first revision of the changes branch for which a patch should be
    generated.
    """)
parser.add_argument('--patch-dir', help="""
    Defines the name of the directory that should contain the patches within the
    patch repository. Default is to use the root of the patch repo.
    """)
parser.add_argument('--authors-file', help="""
    Defines a file that contains the  svn login to git author mapping. The
    format for that file is similar to git-svn, i.e., <login> = <git author>.
    """)
args = parser.parse_args()

changed_url = args.changes_url
vendor_url = args.vendor_url
start_rev = args.start_rev
if args.m is not None: message = args.m
else: message = "Changes"

if args.patch_dir: patch_dir = args.patch_dir
else: patch_dir = "."

if args.authors_file:
    authors_file = args.authors_file

svn_log = check_output(["svn", "log", "--xml", changed_url])
svn_log_dom = parseString(svn_log)

# Our list of svn logs comprising dicts with 'rev' and 'msg' keys
svn_logs = []

# "Plain" xml svn log entries
svn_log_entries = svn_log_dom.getElementsByTagName("logentry")
for e in svn_log_entries:
    rev = int(e.getAttribute("revision"))
    if int(rev) < start_rev:continue
    msg = e.getElementsByTagName("msg")[0].firstChild.nodeValue
    author = e.getElementsByTagName("author")[0].firstChild.nodeValue
    date = e.getElementsByTagName("date")[0].firstChild.nodeValue
    date = datetime.datetime.strptime(date,"%Y-%m-%dT%H:%M:%S.%fZ")
    svn_logs.append({'rev': rev, 'msg': msg, 'author': author, 'date': date})

# All authors of the svn history
svn_authors = { e['author'] for e in svn_logs }

author_mapping = None
if authors_file is not None:
    with open(authors_file) as f:
        lines = f.readlines()
        author_mapping = { col[0].strip() : col[1].strip() for col in (line.split('=') for line in lines) }

if author_mapping is not None:
    authors_diff = svn_authors.difference(author_mapping.keys())
    if authors_diff:
        sys.exit("Following logins could not be mapped via '{0}': {1}".format(authors_file,", ".join(authors_diff)))

work_dir = tempfile.mkdtemp(prefix='tmpgildwork')
patch_repo_dir = tempfile.mkdtemp(prefix='tmpgildpatch')
patch_dir = os.path.join(patch_repo_dir, patch_dir);

if not os.path.exists(patch_dir):
    os.makedirs(patch_dir)

print("Work directory is: " + work_dir, file=sys.stderr)
os.chdir(work_dir)

call(["git","init"])
call(["git","init",patch_repo_dir])

# checkout vendor base into work_dir
call(["svn", "checkout", vendor_url, "--force","."])

# add all paths to git, do not stage them though
call(["git","add","-N","."])
# Remove .svn (FIXME: Should also look into subdirs in case an older version
# of svn is in use)
call(["git", "rm", "--quiet", "--cached", "-r", ".svn"])
call(["git", "commit","-a","-m", "Initial commit."])

# Sort according to the rev in ascending order
svn_logs = sorted(svn_logs, key = lambda k: k['rev'])

current_authors = set()
current_authors_list = []

# Will contain --amend later
amend = []

for log in svn_logs:
	rev = log['rev']
	msg = log['msg']
	author = log['author']
	date = log['date']

	os.chdir(work_dir)

	call(["git","checkout","-b","changes"+str(rev)])
	call(["svn","switch", changed_url,"-r"+str(rev),"--force","."])
	call(["git","add", "-N","."])
	call(["git","rm", "--quiet", "--cached", "-r", ".svn"])

	if author_mapping is not None:
		author_mapped = author_mapping[author]
		if author_mapped not in current_authors:
			current_authors.add(author_mapped)
			current_authors_list.append(author_mapped)
		also_by = ["Also-by: " + author for author in current_authors_list]
		commit_msg = "{0}\n\n{1}".format(message,"\n".join(also_by))
	else:
		commit_msg = message

	env = os.environ.copy()
	author_date = date.strftime("%a %b %d %H:%M:%S %Y %z")
	env["GIT_AUTHOR_DATE"] = author_date
	call(["git","commit"] + amend + ["-a","--date",author_date,"-m",commit_msg], env=env)
	amend = ['--amend']

    # Create patch
	call(["git","format-patch","-U6","--find-copies-harder","--full-index","master","-o",patch_dir])

    # Commit patch
	os.chdir(patch_repo_dir)
	call(["git","add","."])
	call(["git","commit","-m",msg],env=env)

	print(log['msg'])

# Just in case we would add stuff below here
os.chdir(work_dir)

print("Work directory is: " + work_dir, file=sys.stderr)
print("Patch repo at: " + patch_repo_dir, file=sys.stderr)
