#! /usr/bin/python
#
# This script generates the patches for a specific branch.
#
# (c) 2014-2016 by Sebastian Bauer
#

import os.path
import sys
import argparse
from subprocess import call

from gildutils import get_components
from gildutils import get_series_of_component
from gildutils import find_component_base

root = os.getcwd()

def component_completer(**kwargs):
	return sorted(get_components())

def branch_completer(prefix, parsed_args, **kwargs):
	return [s.branch for s in get_series_of_component(parsed_args.component)]

parser = argparse.ArgumentParser(description='Generate patches for a specific branch of a component')
parser.add_argument('component').completer = component_completer
parser.add_argument('branch').completer = branch_completer

try:
	import argcomplete
	argcomplete.autocomplete(parser)
except ImportError:
	pass

args = parser.parse_args()

base = find_component_base(args.component)

# The series file relating branches to checkout ids
series = os.path.join(base, "series")

# The requested branch
reqbranch = args.branch

# Open the branch <-> checkout id table
lines = [line.strip() for line in open(series)]

# Determine branch name
branchok = False
for line in lines:
	branch, checkout, url = line.split("\t")
	if branch == reqbranch:
		branchok = True
		break

if not branchok:
	sys.exit("Couldn't find requested branch")

os.chdir(os.path.join(base,"repo"))
patch_dir = patches = os.path.join("..",branch,"patches")
call(["git", "format-patch", "-U6", "--find-copies-harder", "--full-index", branch+"-base","-o", patch_dir])
